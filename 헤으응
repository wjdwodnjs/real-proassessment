#include<stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴
int main()// 메인함수로 시작
{
	int salary = 0; // 정수형 변수 salary를 0으로 지정
	int money[10] = { 50000, 10000, 5000, 1000, 500, 100, 50, 10, 5, 1 }; 정수형 배열 money를 10칸짜리 목록으로 만들고 값을 넣는다
	int count[10]; // 10칸짜리 정수형 배열 count를 만듦
	scanf_s("%d", &salary);// 10진수 정수형 진수 %d를 이용하여 salary값을 입력받음
	for (int i = 0; i < 10; i++)//i를 0으로 정하고 i가 10이 되기 전까지 i에 1을 더하며 반복함
	{
		count[i] = salary / money[i]; // i = 0 //count배열에서 i번째에 있는 값을 salary에서 money배열의 i번째 있는 값으로 나눈 몫으로 지정
		salary = salary - (money[i] * count[i]);//salary를 기존 salary값에서 money의 i번째 값과 count의 i번째 값을 곱한 값을 뺀 값으로 지정
	}
	for (int i = 0; i < 10; i++)//i를 0으로 정하고 i가 10이 되기 전까지 i에 1을 더하며 반복함
	{
		printf("%d\n", count[i]);//count의 i번째 값을 보여주고 줄 바꿈을 함
	}
	return 0;//main함수를 종료
}


#include <stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴
int main()// 메인함수로 시작
{
	int answer; //answer변수 생성
	while (1)// while의 조건을 1로 하여서 무한으로 즐기는 반복문을 만듦
	{
		scanf("%d", &answer); //10진수 정수형 진수 %d를 이용하여 answer값을 입력받음
		if (answer == 0)//만약 answer값이 0이라면
		{
			break; // while문 종료
		}
		else {
			printf("%d 입력\n", answer);//아니라면 answer값을 출력한뒤 줄바꿈 
		}
	}

	return 0;//main함수를 종료
}


#include <stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴
int main()// 메인함수로 시작
{
	int i, count = 0, answer;//정수형 변수 i, count와 answer를 생성하고, count를 0으로 지정  
	scanf("%d", &answer);//10진수 정수형 진수 %d를 이용하여 answer값을 입력받음
	for (i = 1; i < 101; i++)//i를 1로 지정하고 101이 되기 전까지 1씩 더하며 반복함
	{
		if (i % answer != 0)//i를 answer값으로 나눈값이 0이 아니라면
		{
			continue;// 아래 코드를 건너뜀
		}
		count++;//카운트에 1을 더함
	}
	printf("1부터 100까지의 수 중에서 %d의 배수는 %d개입니다. ", answer, count);//1부터 100까지의 수 중에서 answer의 배수는 count개입니다.를 출력
	return 0;//main함수를 종료
}


#include <stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴
int main()// 메인함수로 시작
{
	int i, j, k;//정수형 변수i,j,k를 생성
	for (i = 0; i < 10; i++)//i를 0으로 정하고, i가 10이 되기 전까지 1씩 더하면 반복
	{
		for (j = 0; j <= 10 - i; j++)//j를 0으로 정하고, j가 10-i가 될때까지 j에 1씩 더하면 반복
		{
			putchar(' ');//공백(space bar)을 출력
		}
		for (k = 0; k <= 2 * i; k++)//k를 0으로 지정하고, 2곱하기i가 될때까지 k에 1씩 더하면 반복
		{
			putchar('@'); //골뱅이를 출력
		}
		puts("");//출력할 문자가 없으니 바로 개행을 보내 줄바꿈을 하게 됨
	}
	return 0;//main함수 
}



#include <stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴

/* 
int main()// 메인함수로 시작
{
	int i; //i를 지정한다
	for (i = 1; i < 10; i++)//i를 1로 지정하고, i가 10이 되기 전까지 i에 1씩 더하며 반복
	{
		printf("2x%d = %2d\n", i, i * 2); // 2곱하기i 의 값을 출력하고 줄바꿈
	}
	return 0; //main함수를 종료
}
*/

#include <stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴
int main()// 메인함수로 시작
{
	int i, j; //정수형 변수 i,j를 지정
	for(i = 2; i < 10; i++)//i를 2라 지정하고, 10이 되기전까지 1씩더하며 반복
	{
		for (j = 1; j < 10; j++)//j를 1이라 지정하고, 10이 되기전까지 1씩 더하며 반복
		{
			printf("%dx%d = %d", i, j, i*j); //i곱하기j의 값을 출력함
		}
	}
}


#include<stdio.h>// printf와 scanf_s함수가 있는 라이브러리를 불러옴
#include<stdlib.h> //rand함수와 srand가 들어있는 라이브러리를 불러옴
#include<time.h> //time함수가 들어있는 라이브러리를 불러옴
int main(void)//// 메인함수로 시작
{
	int a;//정수형 변수 a를 지정
	srand((unsigned)time(NULL));//1~32367의 수중에서 랜덤하게 뽑음

	for (a = 0; a < 6; a++)//a를 0이라 지정하고 6이되기 전까지 1씩 더하며 반복

		printf("%d  ", 1 + rand() % 45);//아까 뽑은 난수를 45로 나눈 나머지 값에 1을 더한 값을 출력
	return 0;//main를 종료
}


#include <stdio.h>//printf와 scanf_s함수가 있는 라이브러리를 불러옴
int main()//메인함수로 시작
{
	int i = 1, end;// 정수형 변수 i를 1이라 지정하고, 정수형 변수 end를 지정
	printf("수를 입력하세요: "); //수를 입력하세요를 출력한다
	scanf("%d", &end); // 입력받은 수를 end에 지정한다
	while (i < end); { //i가 end보다 작으면
	printf("%d", i); //i를 출력하고
	i++; //i에 1을 더하고 while문으로 올라간다
	}
	return 0;//main함수를 종료한다
}




using System;//일반적으로 사용되는 값과 참조 데이터 형식, 이벤트와 이벤트 처리기, 인터페이스, 특성, 예외 처리 등을 정의하는 핵심 클래스 및 기본 클래스가 포함되어 있습니다.
using System.Collections.Generic;//제네릭 컬렉션을 정의하는 클래스와 인터페이스가 포함되어 있습니다. 이를 통해 사용자는 제네릭이 아닌 강력한 형식의 컬렉션보다 형식 안전성과 성능이 높은 강력한 형식의 컬렉션을 만들 수 있습니다.
using System.ComponentModel;//구성 요소와 컨트롤의 런타임 및 디자인 타임 동작을 구현하는 데 사용되는 클래스를 제공합니다. 이 네임스페이스에는 특성 및 형식 변환기를 구현하고, 데이터 소스에 바인딩하고, 구성 요소 사용을 허가하기 위한 기본 클래스 및 인터페이스가 포함됩니다.
using System.Data;//ADO.NET 아키텍처를 나타내는 클래스에 대한 액세스를 제공합니다. ADO.NET을 통해 여러 데이터 원본의 데이터를 효율적으로 관리할 수 있는 구성 요소를 만들 수 있습니다.
using System.Drawing;//GDI+ 기본 그래픽 기능에 대한 액세스를 제공합니다. System.Drawing.Drawing2D, System.Drawing.Imaging 및 System.Drawing.Text 네임스페이스에서는 고급 기능을 제공합니다.
using System.Linq;//LINQ(Language-Integrated Query)를 사용하는 쿼리를 지원하는 클래스 및 인터페이스를 제공합니다.
using System.Text;//ASCII 및 유니코드 문자 인코딩을 나타내는 클래스, 문자 블록과 바이트 블록 간을 변환하기 위한 추상 기본 클래스, String의 중간 인스턴스를 만들지 않고 String 개체를 조작하고 서식을 지정하는 도우미 클래스가 포함되어 있습니다.
using System.Threading.Tasks;//동시 및 비동기 코드를 작성하는 작업을 단순화하는 형식을 제공합니다. 주요 형식은 대기하고 취소될 수 있는 비동기 작업을 나타내는 Task와 값을 반환할 수 있는 작업인 Task<TResult>입니다. TaskFactory 클래스는 작업을 만들고 시작하는 정적 메서드를 제공하고, TaskScheduler 클래스는 기본 스레드 예약 인프라를 제공합니다.
using System.Windows.Forms;//Microsoft Windows 운영 체제의 풍부한 사용자 인터페이스 기능을 활용하는 Windows 기반 애플리케이션을 만들 수 있는 클래스가 포함되어 있습니다.

namespace GomokGameProject// 전역 namespace안에 GomokGameProject 넣는다
{
    public partial class MenuForm : Form//MenuForm클래스를 다음과 같이 정의함
    {
        public MenuForm()//실행
        {
            InitializeComponent();//component 실행
        }

        private void singlePlayButton_Click(object sender, EventArgs e)//singlePlayButton_Click이 실행되면 아래의 코드가 실행됨
        {
            Hide(); // 현재창 숨기기 
            SinglePlayForm singlePlayForm = new SinglePlayForm(); // 싱글창 객체 생성 
            singlePlayForm.FormClosed += new FormClosedEventHandler(childForm_Closed); // 싱글폼이 닫혔을 떄는 child폼 show 
            singlePlayForm.Show(); // 싱글창 보이기 
        }

        private void exitButton_Click(object sender, EventArgs e)//exitButton_Click이 실행되면 아래의 코드가 실행됨
        {
            System.Windows.Forms.Application.Exit(); // 프로그램 전체 종료 
        }

        void childForm_Closed(object sender, FormClosedEventArgs e)//childForm_Closed이 실행되면 아래의 코드가 실행된다
        {
            Show(); //보이기
        }
    }
}



using System;//일반적으로 사용되는 값과 참조 데이터 형식, 이벤트와 이벤트 처리기, 인터페이스, 특성, 예외 처리 등을 정의하는 핵심 클래스 및 기본 클래스가 포함되어 있습니다.
using System.Collections.Generic;//제네릭 컬렉션을 정의하는 클래스와 인터페이스가 포함되어 있습니다. 이를 통해 사용자는 제네릭이 아닌 강력한 형식의 컬렉션보다 형식 안전성과 성능이 높은 강력한 형식의 컬렉션을 만들 수 있습니다.
using System.ComponentModel;//구성 요소와 컨트롤의 런타임 및 디자인 타임 동작을 구현하는 데 사용되는 클래스를 제공합니다. 이 네임스페이스에는 특성 및 형식 변환기를 구현하고, 데이터 소스에 바인딩하고, 구성 요소 사용을 허가하기 위한 기본 클래스 및 인터페이스가 포함됩니다.
using System.Data;//ADO.NET 아키텍처를 나타내는 클래스에 대한 액세스를 제공합니다. ADO.NET을 통해 여러 데이터 원본의 데이터를 효율적으로 관리할 수 있는 구성 요소를 만들 수 있습니다.
using System.Drawing;//GDI+ 기본 그래픽 기능에 대한 액세스를 제공합니다. System.Drawing.Drawing2D, System.Drawing.Imaging 및 System.Drawing.Text 네임스페이스에서는 고급 기능을 제공합니다.
using System.Linq;//LINQ(Language-Integrated Query)를 사용하는 쿼리를 지원하는 클래스 및 인터페이스를 제공합니다.
using System.Text;//ASCII 및 유니코드 문자 인코딩을 나타내는 클래스, 문자 블록과 바이트 블록 간을 변환하기 위한 추상 기본 클래스, String의 중간 인스턴스를 만들지 않고 String 개체를 조작하고 서식을 지정하는 도우미 클래스가 포함되어 있습니다.
using System.Threading.Tasks;//동시 및 비동기 코드를 작성하는 작업을 단순화하는 형식을 제공합니다. 주요 형식은 대기하고 취소될 수 있는 비동기 작업을 나타내는 Task와 값을 반환할 수 있는 작업인 Task<TResult>입니다. TaskFactory 클래스는 작업을 만들고 시작하는 정적 메서드를 제공하고, TaskScheduler 클래스는 기본 스레드 예약 인프라를 제공합니다.
using System.Windows.Forms;//Microsoft Windows 운영 체제의 풍부한 사용자 인터페이스 기능을 활용하는 Windows 기반 애플리케이션을 만들 수 있는 클래스가 포함되어 있습니다.

namespace GomokGameProject// 전역 namespace안에 GomokGameProject 넣는다
{
    public partial class SinglePlayForm : Form
    {
        private const int rectSize = 33; // 오목판의 셀의 크기(네모 크기)  
        private const int edgeCount = 15; // 오목판의 선 개수 

        private enum Horse { none = 0, BLACK, WHITE };
        private Horse[,] board = new Horse[edgeCount, edgeCount];
        private Horse nowPlayer = Horse.BLACK;

        private bool playing = false; 

        public SinglePlayForm()
        {
            InitializeComponent();//component 실행
        }

        private bool judge() // 승리 판정 함수
        {
            for (int i = 0; i < edgeCount - 4; i++) // 가로로 오목이 됐을 경우 
                for (int j = 0; j < edgeCount; j++)//j를 0이라 지정하고 edgecount-4보다 작으면 1씩 더하며 반복
                    if (board[i, j] == nowPlayer && board[i + 1, j] == nowPlayer && board[i + 2, j] == nowPlayer && board[i + 3, j] == nowPlayer && board[i + 4, j] == nowPlayer)//가로로 돌이 5개가 놓이면
                        return true;//1을 반환한다

            for (int i = 0; i < edgeCount; i++) // 세로로 오목이 됐을 경우 
                for (int j = 4; j < edgeCount; j++)//j를 4이라 지정하고 edgecount-4보다 작으면 1씩 더하며 반복
                    if (board[i, j] == nowPlayer && board[i, j - 1] == nowPlayer && board[i, j - 2] == nowPlayer && board[i, j - 3] == nowPlayer && board[i, j - 4] == nowPlayer)//세로로 돌 5개가 놓이면 
                        return true;//1을 반환

            for (int i = 0; i < edgeCount - 4; i++) // Y = X 직선 ( 대각선 ) 
                for (int j = 0; j < edgeCount - 4; j++)//j를 0이라 지정하고 edgecount-4보다 작으면 1씩 더하며 반복
                    if (board[i, j] == nowPlayer && board[i + 1, j+ 1] == nowPlayer && board[i + 2, j + 2] == nowPlayer && board[i + 3, j + 3] == nowPlayer && board[i + 4, j + 4] == nowPlayer)//우상향 대각선으로 돌이 5개 놓이면
                        return true;//1을 반환

            for (int i = 4; i < edgeCount; i++) // Y = - X 직선 ( 대각선 반대 ) 
                for (int j = 0; j < edgeCount - 4; j++)//j를 0이라 지정하고 edgecount-4보다 작으면 1씩 더하며 반복
                    if (board[i, j] == nowPlayer && board[i - 1, j + 1] == nowPlayer && board[i - 2, j + 2] == nowPlayer && board[i - 3, j + 3] == nowPlayer && board[i - 4, j + 4] == nowPlayer)//우하향 대각선으로 돌이 5개가 놓이면
                        return true;//1을 반환

            return false; // 필수, 위에서 반환이 되지 않았을 때 0을 반환
        }

        private void refresh()
        {
            this.boardPicture.Refresh();//보드판을 새로고침
            for (int i = 0; i < edgeCount; i++)//i를 0이라 지정하고 edgecount보다 작으면 i에 1씩 더하며 반복한다
                for (int j = 0; j < edgeCount; j++)//ㅌ
                    board[i, j] = Horse.none; 
        }

        private void boardPicture_MouseDown(object sender, MouseEventArgs e) // 오목판을 클릭했을 떄 
        {
            if (!playing)//플레이 중이 아니라면
            {
                MessageBox.Show("게임을 실행해주세요");//게임을 실행해 주세요 를 메시지 박스로 띄움
                return; 
            }
            Graphics g = this.boardPicture.CreateGraphics(); // 그림 그리기 위한 그래픽스 개체 
            int x = e.X / rectSize; // 사용자가 클릭한 위치가 몇번째 셀인지 확인 
            int y = e.Y / rectSize;//사용자가 클릭한 위치가 몇번째 셀인지 확인
            if (x < 0 || y < 0 || x >= edgeCount || y >= edgeCount) // 0 ~ 14 미만이거나 초과일 때 x 
            {
                MessageBox.Show("테두리를 벗어날 수 없습니다.");// 테두리를 벗어날 수 없습니다 를 메시지 박스로 띄움
                return;
            }
            MessageBox.Show(x + "," + y); // 현재 셀의 위치
                                          // 

            if (board[x, y] != Horse.none) return;
            board[x, y] = nowPlayer; 
            
            if (nowPlayer == Horse.BLACK)
            {
                SolidBrush brush = new SolidBrush(Color.Black); // 현재 플레이어가 나면 검은색 돌 
                g.FillEllipse(brush, x * rectSize, y * rectSize, rectSize, rectSize); // 원형 그리기 , 좌표, 지름 
            }
            else
            {
                SolidBrush brush = new SolidBrush(Color.White);// 현재 플레이어가 내가 아니면 흰색돌
                g.FillEllipse(brush, x * rectSize, y * rectSize, rectSize, rectSize);// 원형 그리기, 좌표, 지름
            }

            if (judge())//승리 조건이 만족하여 judge가 true되면
            {
                status.Text = nowPlayer.ToString() + "플레이어가 승리했습니다. ";
                playing = false;//playing을 false로 지정
                playButton.Text = "게임시작"; 
            }
            else//승리조건이 만족하지않아 게임이 계속 실행될때
            {
                nowPlayer = ((nowPlayer == Horse.BLACK) ? Horse.WHITE : Horse.BLACK);// 현재 돌이 흑돌이면 현재플레이어를 백돌로 그렇지 않다면 흑돌로 지정
                status.Text = nowPlayer.ToString() + "플레이어의 차례입니다. "; 
            }
        }

        private void boardPicture_Paint(object sender, PaintEventArgs e) // 오목판 그리기 
        {
            Graphics gp = e.Graphics;
            Color lineColor = Color.Black; // 오목판의 선 색깔
            Pen p = new Pen(lineColor, 2);//펜의 선 굵기 지정
            // 전체 오목판 테두리 
            gp.DrawLine(p, rectSize / 2, rectSize / 2, rectSize / 2, rectSize * edgeCount - rectSize / 2); // 좌측
            gp.DrawLine(p, rectSize / 2, rectSize / 2, rectSize * edgeCount - rectSize / 2, rectSize / 2); // 상측
            gp.DrawLine(p, rectSize / 2, rectSize * edgeCount - rectSize / 2, rectSize * edgeCount - rectSize / 2, rectSize * edgeCount - rectSize / 2); // 하측
            gp.DrawLine(p, rectSize * edgeCount - rectSize / 2, rectSize / 2, rectSize * edgeCount - rectSize / 2, rectSize * edgeCount - rectSize / 2); // 우측
            p = new Pen(lineColor, 1);//펜굵기 변경
            // 오목판 내부 , 대각선 방향으로 이동하면서 십자가 모양의 선 그리기
            // + 
            //   +
            //     + ... 
            for (int i = rectSize + rectSize / 2; i < rectSize * edgeCount - rectSize / 2; i += rectSize)//오목판 한 칸 크기로 i값 추가
            {
                gp.DrawLine(p, rectSize / 2, i, rectSize * edgeCount - rectSize / 2, i);//가로축 그리기
                gp.DrawLine(p, i, rectSize / 2, i, rectSize * edgeCount - rectSize / 2);// 세로축 그리기
            }
        }

        private void playButton_Click(object sender, EventArgs e)//playButton이 클릭되면
        {
            if (!playing)//플레이 하는중이 아니라면 실행
            {
                refresh();//새로고침
                playing = true;//playing을  true로 지정
                playButton.Text = "재시작";
                status.Text = nowPlayer.ToString() + " 플레이어의 차례입니다. "; 
            }
            else// 그렇지 않으면 실행
            {
                refresh();//
                status.Text = "게임이 재시작 되었습니다. "; 
            }
        }
    }
}
